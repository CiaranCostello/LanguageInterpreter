
==================== FINAL INTERFACE ====================
2017-01-15 16:40:41.962275 UTC

interface main@main:Main 8001
  interface hash: f7942b16245a54e278c3506128e3d66b
  ABI hash: d0ece2b3c9076b367761689a7901afc1
  export-list hash: 25b406dd5407ee367d135177fd89efb8
  orphan hash: 3d04c4a74c537bd1e4aaf3489fdfc1c9
  flag hash: fe4eeeb014df848bb3702b2014c1514a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.filep
  Main.main
  Main.readStats
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      interpreter-0.1.0.0@interpreter-0.1.0.0-GqnoMtv2RfEKuRoO5Q8gRz
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.IO 7ddc7086a7fc3b7d7043cc7bc59a04ba
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  interpreter-0.1.0.0@interpreter-0.1.0.0-GqnoMtv2RfEKuRoO5Q8gRz:InterpreterBase fc106bdd56ca5a3ea148524627c37a29
2b02cd0b6f770e9b4ecf9676e9dc49c5
  $sread :: GHC.Base.String -> InterpreterBase.Statement
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither
                        @ InterpreterBase.Statement
                        InterpreterBase.$fReadStatement
                        s of wild {
                   Data.Either.Left x
                   -> GHC.Err.errorWithoutStackTrace
                        @ 'GHC.Types.PtrRepLifted
                        @ InterpreterBase.Statement
                        x
                   Data.Either.Right y -> y }) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
76242c04e100a633e7ec278673e1c188
  filep :: GHC.IO.FilePath
  {- Unfolding: (GHC.CString.unpackCString# "./test/program.txt"#) -}
5b601c9ce58bc2df505d13430b280fd9
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
24b7423e23cccd68d68aeab05aeea041
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.filep
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   stmts :: [InterpreterBase.Statement]
                   = GHC.Base.map
                       @ [GHC.Types.Char]
                       @ InterpreterBase.Statement
                       Main.$sread
                       (Data.OldList.lines ipv3)
                 } in
                 case Main.main2 stmts ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 InterpreterBase.run1
                   (InterpreterBase.$fMonoidStatement_go stmts)
                   ipv4 } } }) -}
798a2ad306aa7db234b2b6dfce98ce79
  main2 ::
    [InterpreterBase.Statement]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
d36dd7f37aecfd0d3f303da689869821
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
ea5b292e625163c7d6f9578979467dbc
  readStats :: GHC.Base.String -> [InterpreterBase.Statement]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 GHC.Base.build
                   @ InterpreterBase.Statement
                   (\ @ b1
                      (c :: InterpreterBase.Statement -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ [GHC.Types.Char]
                      @ b1
                      (GHC.Base.mapFB
                         @ InterpreterBase.Statement
                         @ b1
                         @ [GHC.Types.Char]
                         c
                         Main.$sread)
                      n
                      (Data.OldList.lines s))) -}
"SPEC/Main read @ Statement" [ALWAYS] forall ($dRead :: GHC.Read.Read
                                                          InterpreterBase.Statement)
  Text.Read.read @ InterpreterBase.Statement $dRead = Main.$sread
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

